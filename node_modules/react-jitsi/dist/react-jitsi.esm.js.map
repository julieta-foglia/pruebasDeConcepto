{"version":3,"file":"react-jitsi.esm.js","sources":["../src/defaults.tsx","../src/Jitsi.tsx"],"sourcesContent":["import React from 'react'\nimport * as Type from './types'\n\nexport const Loader = (): React.ReactElement => <div>Loading meeting...</div>\n\nexport const Props: Type.Props = {\n    domain: 'meet.jit.si',\n    roomName: (Math.random() + 0.48151642).toString(36).substring(2)\n}\n\nexport const ContainerStyle: React.CSSProperties = {\n    width: '800px',\n    height: '400px',\n}\n\n\nexport const FrameStyle = (loading: boolean): React.CSSProperties => ({\n    display: loading ? 'none' : 'block',\n    width: '100%',\n    height: '100%'\n})\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Props, JitsiMeetAPIOptions } from './types'\nimport * as Default from './defaults'\n\n\nconst Jitsi: React.FC<Props> = (props: Props) => {\n\n    const {\n        containerStyle,\n        frameStyle,\n        loadingComponent,\n        onAPILoad,\n        onIframeLoad,\n        domain,\n        roomName,\n        password,\n        displayName,\n        config,\n        interfaceConfig,\n        noSSL,\n        jwt,\n        devices,\n        userInfo,\n    } = { ...Default.Props, ...props }\n\n    const [loading, setLoading] = useState(true)\n    const ref = useRef<HTMLDivElement | null>(null)\n\n    const Loader = loadingComponent || Default.Loader\n\n    const startConference = (): void => {\n\n        try {\n\n            const options: JitsiMeetAPIOptions = {\n                roomName,\n                parentNode: ref.current,\n                configOverwrite: config,\n                interfaceConfigOverwrite: interfaceConfig,\n                noSSL,\n                jwt,\n                onLoad: onIframeLoad,\n                devices,\n                userInfo\n            }\n\n            const api = new window.JitsiMeetExternalAPI(domain, options)\n\n            if (!api) throw 'Failed to create JitsiMeetExternalAPI istance'\n\n            if (onAPILoad) onAPILoad(api)\n\n            api.addEventListener('videoConferenceJoined', () => {\n\n                setLoading(false)\n\n                api.executeCommand('displayName', displayName)\n\n                if (password) api.executeCommand('password', password)\n\n            })\n\n\n        } catch (error) {\n\n            console.error('Failed to start the conference', error)\n\n        }\n\n    }\n\n    useEffect(() => {\n\n        if (window.JitsiMeetExternalAPI) startConference()\n        else console.error('Jitsi Meet API library not loaded. Did you include it in the html body?')\n\n    }, [])\n\n    return (\n        <div id='react-jitsi-container'\n            style={{ ...Default.ContainerStyle, ...containerStyle }} >\n\n            {loading && <Loader />}\n\n            <div id='react-jitsi-frame'\n                style={{ ...Default.FrameStyle(loading), ...frameStyle }}\n                ref={ref} />\n\n        </div>\n    )\n}\n\nexport default Jitsi\n\n"],"names":["Loader","React","Props","domain","roomName","Math","random","toString","substring","ContainerStyle","width","height","FrameStyle","loading","display","Jitsi","props","Default","containerStyle","frameStyle","loadingComponent","onAPILoad","onIframeLoad","password","displayName","config","interfaceConfig","noSSL","jwt","devices","userInfo","useState","setLoading","ref","useRef","startConference","options","parentNode","current","configOverwrite","interfaceConfigOverwrite","onLoad","api","window","JitsiMeetExternalAPI","addEventListener","executeCommand","error","console","useEffect","id","style"],"mappings":"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"}