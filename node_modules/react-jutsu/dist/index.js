'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var useJitsi = function useJitsi(options) {
  var domain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'meet.jit.si';

  var _useState = React.useState(null),
      _useState2 = slicedToArray(_useState, 2),
      jitsi = _useState2[0],
      setJitsi = _useState2[1];

  React.useEffect(function () {
    if (window.JitsiMeetExternalAPI) {
      options.parentNode = document.getElementById(options.parentNode);
      // eslint-disable-next-line no-undef
      setJitsi(new JitsiMeetExternalAPI(domain, options));
    } else {
      setJitsi({ error: 'JitsiMeetExternalAPI is not available, check if https://meet.jit.si/external_api.js was loaded' });
    }
    return function () {
      return jitsi && jitsi.dispose();
    };
  }, []);

  return jitsi;
};

useJitsi.propTypes = {
  options: PropTypes.shape({
    roomName: PropTypes.string.isRequired,
    width: PropTypes.string,
    height: PropTypes.string,
    parentNode: PropTypes.string,
    configOverwrite: PropTypes.string,
    interfaceConfigOverwrite: PropTypes.object,
    noSSL: PropTypes.bool,
    jwt: PropTypes.string,
    onload: PropTypes.func,
    invitees: PropTypes.array,
    devices: PropTypes.object,
    userInfo: PropTypes.object
  }),
  domain: PropTypes.string
};

var Jutsu = function Jutsu(props) {
  var domain = props.domain,
      roomName = props.roomName,
      displayName = props.displayName,
      password = props.password,
      _props$jwt = props.jwt,
      jwt = _props$jwt === undefined ? null : _props$jwt,
      subject = props.subject;
  var loadingComponent = props.loadingComponent,
      containerStyles = props.containerStyles,
      jitsiContainerStyles = props.jitsiContainerStyles;

  var _useState = React.useState(true),
      _useState2 = slicedToArray(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var jitsi = useJitsi({ roomName: roomName, parentNode: 'jitsi-container', jwt: jwt }, domain);

  var containerStyle = {
    width: '800px',
    height: '400px'
  };

  var jitsiContainerStyle = {
    display: loading ? 'none' : 'block',
    width: '100%',
    height: '100%'
  };

  React.useEffect(function () {
    if (jitsi) {
      jitsi.executeCommand('subject', subject);

      jitsi.addEventListener('videoConferenceJoined', function () {
        if (password) jitsi.executeCommand('password', password);
        setLoading(false);
        jitsi.executeCommand('displayName', displayName);
      });

      jitsi.addEventListener('passwordRequired', function () {
        if (password) {
          jitsi.executeCommand('password', password);
        }
        setLoading(false);
      });
    }

    return function () {
      return jitsi && jitsi.dispose();
    };
  }, [jitsi]);

  return React__default.createElement(
    'div',
    { style: _extends({}, containerStyle, containerStyles) },
    loading && (loadingComponent || React__default.createElement(
      'p',
      null,
      'Loading ...'
    )),
    React__default.createElement('div', {
      id: 'jitsi-container',
      style: _extends({}, jitsiContainerStyle, jitsiContainerStyles)
    })
  );
};

Jutsu.propTypes = {
  domain: PropTypes.string,
  roomName: PropTypes.string.isRequired,
  displayName: PropTypes.string,
  password: PropTypes.string,
  jwt: PropTypes.string,
  subject: PropTypes.string,
  loadingComponent: PropTypes.object,
  containerStyles: PropTypes.object,
  jitsiContainerStyles: PropTypes.object
};

exports.Jutsu = Jutsu;
exports.useJitsi = useJitsi;
//# sourceMappingURL=index.js.map
